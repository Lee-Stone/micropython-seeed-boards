import time
from boards.xiao import XiaoPin, XiaoSPI

# Tested with 7.5" Monochrome eInk ePaper Display
# with 800x480 Pixels, SPI interface

RST = 0                     # D0
CS = 1                      # D1
DC = 3                      # D3
BUSY = 5                    # D5
sck = 9                     # D9
mosi = 10                   # D10
miso = 8                    # D8
spi = "spi0"

# Hardware configuration
RST = XiaoPin(RST, XiaoPin.OUT)
CS = XiaoPin(CS, XiaoPin.OUT)
DC = XiaoPin(DC, XiaoPin.OUT)
BUSY = XiaoPin(BUSY, XiaoPin.IN, XiaoPin.PULL_UP)
spi = XiaoSPI(spi, 20000000, sck, mosi, miso)

# Reset the display
def reset():
    RST.value(0)
    time.sleep_ms(10)
    RST.value(1)
    time.sleep_ms(10)

# Send command or data
def send_command(command):
    DC.value(0)
    CS.value(0)
    spi.write(bytearray([command]))
    CS.value(1)

# Send command or data
def send_data(data):
    DC.value(1)
    CS.value(0)
    if isinstance(data, int):
        spi.write(bytearray([data]))
    else:
        spi.write(data)
    CS.value(1)

# Wait until the display is idle
def wait_until_idle():
#     while BUSY.value() == 0:
#         time.sleep_ms(1)
    time.sleep_ms(1)

# Initialize the display
def init_display():
    reset()
    send_command(0x00)
    send_data(0x1F)
    send_command(0x04)
    time.sleep_ms(100)
    wait_until_idle()
    send_command(0x50)
    send_data(0x21)
    send_data(0x07)

# Clear the screen
def clear_screen():
    CS.value(0)
    DC.value(0)
    spi.write(bytearray([0x10]))
    DC.value(1)
    for _ in range(48000):
        spi.write(bytearray([0xFF]))
    DC.value(0)
    spi.write(bytearray([0x13]))
    DC.value(1)
    for _ in range(48000):
        spi.write(bytearray([0xFF]))
    DC.value(0)
    spi.write(bytearray([0x12]))
    CS.value(1)
    time.sleep_ms(1)
    wait_until_idle()

# Draw a pixel
def fill_rect(x, y, width, height, color):
    row_bytes = (width + 7) // 8
    total_bytes = row_bytes * height
    x_end = x + width - 1
    y_end = y + height - 1
    send_command(0x50)
    send_data(0xA9)
    send_data(0x07)
    send_command(0x91)
    send_command(0x90)
    send_data(x >> 8)
    send_data(x & 0xFF)
    send_data(x_end >> 8)
    send_data((x_end & 0xFF) - 1)
    send_data(y >> 8)
    send_data(y & 0xFF)
    send_data(y_end >> 8)
    send_data((y_end & 0xFF) - 1)
    send_data(0x01)
    send_command(0x13)
    for _ in range(total_bytes):
        send_data(color)
    send_command(0x12)
    time.sleep_ms(10)
    wait_until_idle()
    send_command(0x92)

# Display an image
def display_partial_image(x, y, width, height, image_data):
    row_bytes = (width + 7) // 8
    total_bytes = len(image_data)
    x_end = x + width - 1
    y_end = y + height - 1
    send_command(0x50)  
    send_data(0xA9)     
    send_data(0x07)    
    send_command(0x91)   
    send_command(0x90)   
    send_data(x >> 8)
    send_data(x & 0xFF)
    send_data(x_end >> 8)
    send_data(x_end & 0xFF)
    send_data(y >> 8)
    send_data(y & 0xFF)
    send_data(y_end >> 8)
    send_data(y_end & 0xFF)
    send_data(0x01)     
    send_command(0x13)
    for i in range(total_bytes):
        send_data(~image_data[i])
    send_command(0x12)  
    time.sleep_ms(10)
    wait_until_idle()
    send_command(0x92)  

# Initialize and test the display
init_display()
# clear_screen()
# fill_rect(0, 0, 100, 100, 0x00)

# Example image data (90x90 pixels)
img_data = bytearray(
    [0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x7F,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xE0,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,
    0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xE0,0x00,0x00,0x78,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,
    0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,
    0x78,0x00,0x73,0xFF,0xF8,0x07,0xFF,0xF0,0x01,0xE0,0x00,0x00,0x78,0x00,0x7F,0xFF,
    0xFC,0x07,0xFF,0xF0,0x01,0xE0,0x00,0x00,0x78,0x00,0x7F,0xFF,0xFC,0x07,0xFF,0xF0,
    0x01,0xE0,0x00,0x00,0x78,0x00,0x7F,0xFF,0xF8,0x07,0xFF,0xF0,0x01,0xE0,0x00,0x00,
    0x78,0x00,0x7C,0x00,0x00,0x00,0x00,0xF0,0x01,0xE0,0x00,0x00,0x78,0x00,0x7C,0x00,
    0x00,0x00,0x00,0xF0,0x01,0xE0,0x00,0x00,0x78,0x00,0x7C,0x00,0x00,0x00,0x00,0xF0,
    0x01,0xE0,0x00,0x00,0x78,0x00,0x7C,0x00,0x00,0x00,0x00,0xF0,0x01,0xE0,0x00,0x00,
    0x78,0x00,0x7C,0x07,0xFF,0xC0,0x00,0xF0,0x01,0xE0,0x00,0x00,0x78,0x00,0x7C,0x0F,
    0xFF,0xE0,0x00,0xF0,0x01,0xE0,0x00,0x00,0x78,0x00,0x7C,0x0F,0xFF,0xE0,0x00,0xF0,
    0x01,0xE0,0x00,0x00,0x78,0x00,0x7C,0x0F,0xFF,0xC0,0x00,0xF0,0x01,0xE0,0x00,0x00,
    0x78,0x00,0x7C,0x0F,0x80,0x00,0x00,0xF0,0x01,0xE0,0x00,0x00,0x78,0x00,0x7C,0x0F,
    0x00,0x00,0x00,0xF0,0x01,0xE0,0x00,0x00,0x78,0x00,0x7C,0x0F,0x00,0x00,0x00,0xF0,
    0x01,0xE0,0x00,0x00,0x78,0x00,0x7C,0x0F,0x00,0x00,0x01,0xF0,0x01,0xE0,0x00,0x00,
    0x78,0x00,0x7C,0x0F,0x00,0x0F,0xFF,0xF0,0x01,0xE0,0x00,0x00,0x78,0x00,0x7C,0x0F,
    0x00,0x0F,0xFF,0xF0,0x01,0xE0,0x00,0x00,0x78,0x00,0x7C,0x0F,0x00,0x0F,0xFF,0xF0,
    0x01,0xE0,0x00,0x00,0x78,0x00,0x78,0x0F,0x00,0x0F,0xFF,0xF0,0x01,0xE0,0x00,0x00,
    0x78,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x0F,
    0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x0F,0x00,0x00,0x00,0x00,
    0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x0F,0x80,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,
    0x78,0x00,0x00,0x0F,0xFF,0xE0,0x00,0x00,0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x0F,
    0xFF,0xE0,0x00,0x00,0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x0F,0xFF,0xE0,0x00,0x00,
    0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x07,0x0F,0xC0,0x00,0x00,0x01,0xE0,0x00,0x00,
    0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,
    0x78,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,0x78,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x01,0xE0,0x00,0x00,0x7F,0xE0,0x00,0x00,0x1F,0xFF,0x00,0x03,
    0xF7,0xE0,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,
    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x7F,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xE0,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,
    0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x7F,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xE0,0x00,0x00,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]
)
display_partial_image(0, 0, 90, 90, img_data)
