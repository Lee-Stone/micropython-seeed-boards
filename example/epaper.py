import time
from boards.xiao import XiaoPin, XiaoSPI  #If you are using XIAO RA4M1, you must delete this line

# Tested with 7.5" and 5.83" Monochrome eInk ePaper Display

RST = 0                     # D0
CS = 1                      # D1
DC = 3                      # D3
BUSY = 5                    # D5
sck = 9                     # D9
mosi = 10                   # D10
miso = 8                    # D8
spi = "spi0"

# Hardware configuration
RST = XiaoPin(RST, XiaoPin.OUT)
CS = XiaoPin(CS, XiaoPin.OUT)
DC = XiaoPin(DC, XiaoPin.OUT)
BUSY = XiaoPin(BUSY, XiaoPin.IN, XiaoPin.PULL_UP)
spi = XiaoSPI(spi, 20000000, sck, mosi, miso)

# Reset the display
def reset():
    RST.value(0)
    time.sleep_ms(10)
    RST.value(1)
    time.sleep_ms(10)

# Send command or data
def send_command(command):
    DC.value(0)
    CS.value(0)
    spi.write(bytearray([command]))
    CS.value(1)

# Send command or data
def send_data(data):
    DC.value(1)
    CS.value(0)
    if isinstance(data, int):
        spi.write(bytearray([data]))
    else:
        spi.write(data)
    CS.value(1)

# Wait until the display is idle
def wait_until_idle():
#     while BUSY.value() == 0:
#         time.sleep_ms(1)
    time.sleep_ms(1)

# Initialize the display
def init_display():
    reset()
    send_command(0x00)
    send_data(0x1F)
    send_command(0x04)
    time.sleep_ms(100)
    wait_until_idle()
    send_command(0x50)
    send_data(0x21)
    send_data(0x07)
    
# Draw a pixel
def fill_rect(x, y, width, height, color):
    row_bytes = (width + 7) // 8
    total_bytes = row_bytes * height
    x_end = x + width - 1
    y_end = y + height - 1
    send_command(0x50)
    send_data(0xA9)
    send_data(0x07)
    send_command(0x91)
    send_command(0x90)
    send_data(x >> 8)
    send_data(x & 0xFF)
    send_data(x_end >> 8)
    send_data((x_end & 0xFF) - 1)
    send_data(y >> 8)
    send_data(y & 0xFF)
    send_data(y_end >> 8)
    send_data((y_end & 0xFF) - 1)
    send_data(0x01)
    send_command(0x13)
    for _ in range(total_bytes):
        send_data(color)
    send_command(0x12)
    time.sleep_ms(10)
    wait_until_idle()
    send_command(0x92)

# Display an image
def display_partial_image(x, y, width, height, image_data):
    row_bytes = (width + 7) // 8
    total_bytes = len(image_data)
    x_end = x + width - 1
    y_end = y + height - 1
    send_command(0x50)  
    send_data(0xA9)     
    send_data(0x07)    
    send_command(0x91)   
    send_command(0x90)   
    send_data(x >> 8)
    send_data(x & 0xFF)
    send_data(x_end >> 8)
    send_data(x_end & 0xFF)
    send_data(y >> 8)
    send_data(y & 0xFF)
    send_data(y_end >> 8)
    send_data(y_end & 0xFF)
    send_data(0x01)     
    send_command(0x13)
    for i in range(total_bytes):
        send_data(~image_data[i])
    send_command(0x12)  
    time.sleep_ms(10)
    wait_until_idle()
    send_command(0x92)  

# Example image data (100x100 pixels)
img_data = bytearray(
    [0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xF9,0xFC,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xE3,0xFE,0x3F,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xC3,0xFE,0x3F,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xC3,
    0xFE,0x1F,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0x87,0xFF,0x0F,0xFF,
    0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0xFF,0x0F,0xFF,0xFF,0xFF,0xFF,
    0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0x07,0xFF,0x07,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,
    0xFF,0xFF,0xFE,0x07,0xFF,0x03,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFE,
    0x0F,0xFF,0x03,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xBF,0xFC,0x0F,0xFF,0x81,
    0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0x3F,0xFC,0x0F,0xFF,0x81,0xFF,0xE7,0xFF,
    0xFF,0xF0,0xFF,0xFF,0xFF,0x3F,0xF8,0x0F,0xFF,0x81,0xFF,0xE7,0xFF,0xFF,0xF0,0xFF,
    0xFF,0xFF,0x3F,0xF8,0x1F,0xFF,0x80,0xFF,0xE7,0xFF,0xFF,0xF0,0xFF,0xFF,0xFE,0x3F,
    0xF8,0x1F,0xFF,0xC0,0xFF,0xE3,0xFF,0xFF,0xF0,0xFF,0xFF,0xFE,0x3F,0xF8,0x1F,0xFF,
    0xC0,0xFF,0xC3,0xFF,0xFF,0xF0,0xFF,0xFF,0xFE,0x1F,0xF0,0x1F,0xFF,0xC0,0xFF,0xC3,
    0xFF,0xFF,0xF0,0xFF,0xFF,0xFE,0x1F,0xF0,0x1F,0xFF,0xC0,0xFF,0xC3,0xFF,0xFF,0xF0,
    0xFF,0xFF,0xFE,0x1F,0xF0,0x1F,0xFF,0xC0,0x7F,0xC3,0xFF,0xFF,0xF0,0xFF,0xFF,0xFE,
    0x0F,0xF0,0x1F,0xFF,0xC0,0x7F,0x83,0xFF,0xFF,0xF0,0xFF,0xFF,0xFE,0x0F,0xF0,0x1F,
    0xFF,0xC0,0x7F,0x83,0xFF,0xFF,0xF0,0xFF,0xFF,0xFE,0x0F,0xF0,0x1F,0xFF,0xC0,0x7F,
    0x03,0xFF,0xFF,0xF0,0xFF,0xFF,0xFE,0x0F,0xF0,0x1F,0xFF,0xC0,0x7F,0x03,0xFF,0xFF,
    0xF0,0xFF,0xFF,0xFE,0x07,0xF0,0x1F,0xFF,0xC0,0x7F,0x03,0xFF,0xFF,0xF0,0xFF,0xFF,
    0xFE,0x07,0xF0,0x1F,0xFF,0xC0,0x7E,0x03,0xFF,0xFF,0xF0,0xFF,0xFF,0xFE,0x03,0xF0,
    0x1F,0xFF,0xC0,0xFE,0x03,0xFF,0xFF,0xF0,0xFF,0xFF,0xFE,0x03,0xF8,0x1F,0xFF,0xC0,
    0xFC,0x07,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0x01,0xF8,0x1F,0xFF,0xC0,0xFC,0x07,0xFF,
    0xFF,0xF0,0xFF,0xFF,0xFF,0x00,0xF8,0x0F,0xFF,0x80,0xFC,0x07,0xFF,0xFF,0xF0,0xFF,
    0xFF,0xFF,0x00,0xFC,0x0F,0xFF,0x81,0xF8,0x0F,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0x80,
    0x7C,0x0F,0xFF,0x81,0xF0,0x0F,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0x80,0x7C,0x0F,0xFF,
    0x83,0xE0,0x0F,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0x80,0x3E,0x0F,0xFF,0x83,0xE0,0x1F,
    0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xC0,0x3E,0x07,0xFF,0x07,0xC0,0x1F,0xFF,0xFF,0xF0,
    0xFF,0xFF,0xFF,0xC0,0x1F,0x07,0xFF,0x07,0x80,0x3F,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,
    0xE0,0x0F,0x87,0xFF,0x0F,0x80,0x3F,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xF0,0x07,0xC3,
    0xFE,0x1F,0x00,0x7F,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xF8,0x03,0xE3,0xFE,0x3E,0x00,
    0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFC,0x01,0xE3,0xFC,0x7C,0x01,0xFF,0xFF,0xFF,
    0xF0,0xFF,0xFF,0xFF,0xFE,0x00,0xF9,0xFC,0xF8,0x03,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,
    0xFF,0xFF,0x00,0x7D,0xFF,0xF0,0x07,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0x80,
    0x3F,0xFF,0xE0,0x0F,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xE0,0x1F,0xFF,0xC0,
    0x3F,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xF8,0x0F,0xFF,0x80,0xFF,0xFF,0xFF,
    0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0x83,0xFF,0x07,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFD,0xF0,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE1,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xE1,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xE1,0xF0,0xFF,0x00,0xFF,0xC0,0xFF,0xF8,0x1F,0xFF,0x01,0xFF,0xF1,0xE1,
    0xF0,0xFC,0x00,0x3F,0x00,0x3F,0xE0,0x07,0xFC,0x00,0x7F,0x80,0x21,0xF0,0xFC,0x00,
    0x3E,0x00,0x0F,0xC0,0x03,0xF8,0x00,0x3F,0x00,0x01,0xF0,0xF8,0x08,0x3C,0x00,0x0F,
    0x80,0x01,0xF0,0x00,0x1E,0x00,0x01,0xF0,0xF8,0x7E,0x78,0x1F,0x07,0x07,0xE0,0xF0,
    0x7C,0x1C,0x00,0x01,0xF0,0xF8,0x7F,0xF8,0x3F,0x83,0x0F,0xF0,0xE0,0xFE,0x0C,0x0F,
    0x01,0xF0,0xF8,0x1F,0xF8,0x7F,0xC2,0x0F,0xF8,0x61,0xFF,0x08,0x3F,0x81,0xF0,0xF8,
    0x00,0xF0,0x00,0x02,0x00,0x00,0x60,0x00,0x08,0x3F,0xC1,0xF0,0xFC,0x00,0x30,0x00,
    0x02,0x00,0x00,0x40,0x00,0x08,0x7F,0xC1,0xF0,0xFE,0x00,0x30,0x00,0x02,0x00,0x00,
    0x40,0x00,0x08,0x7F,0xC1,0xF0,0xFF,0x80,0x10,0x00,0x02,0x00,0x00,0x40,0x00,0x08,
    0x7F,0xC1,0xF0,0xFF,0xFE,0x18,0x7F,0xFE,0x0F,0xFF,0xE1,0xFF,0xF8,0x3F,0xC1,0xF0,
    0xFF,0xFE,0x18,0x3F,0xFF,0x07,0xFF,0xE0,0xFF,0xF8,0x1F,0x81,0xF0,0xFC,0x7E,0x18,
    0x1F,0x8F,0x03,0xF1,0xE0,0x7E,0x3C,0x0F,0x01,0xF0,0xF8,0x00,0x1C,0x00,0x07,0x80,
    0x01,0xF0,0x00,0x1C,0x00,0x01,0xF0,0xF8,0x00,0x3E,0x00,0x07,0xC0,0x00,0xF8,0x00,
    0x1E,0x00,0x01,0xF0,0xFC,0x00,0x7F,0x00,0x0F,0xE0,0x01,0xFC,0x00,0x3F,0x00,0x01,
    0xF0,0xFF,0x80,0xFF,0xC0,0x3F,0xF8,0x07,0xFF,0x80,0xFF,0xC0,0x61,0xF0,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xF0,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,
    0xFF,0xFF,0xFF,0xF0,]
)

try:
    # Initialize and test the display
    init_display()
    # Refresh according to your screen model, for example, 5.83 inches is 600x448
    # 0xFF is black and 0x00 is white
    # fill_rect(0, 0, 648, 480, 0xFF)
    # Do not exceed your screen size
    display_partial_image(0, 0, 100, 100, img_data)
    print("ePaper initialized successfully")
    while True:
        time.sleep(1)
except KeyboardInterrupt:
    print("\nProgram interrupted by user")
except Exception as e:
    print("\nError occurred: %s" % {e})
